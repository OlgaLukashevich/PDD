package com.example.pdd0

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.ArrowForward
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Close
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.window.Dialog
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import coil.compose.rememberAsyncImagePainter
import coil.request.ImageRequest
import com.example.pdd0.parser.parseJson
import com.example.pdd0.utils.QuestionNavigationPanel
import com.example.pdd0.utils.AnswerButton



class QuestionScreenActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è
            val navController = rememberNavController()
            val questionViewModel: QuestionViewModel = viewModel() // –°–æ–∑–¥–∞—ë–º ViewModel
            val questionList = parseJson(LocalContext.current) // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤

            NavHost(navController = navController, startDestination = "main_screen") {
                composable("main_screen") { MainScreen(navController, questionViewModel,questionList) }
                composable("question_screen/{questionIndex}") { backStackEntry ->
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                    val questionIndex = backStackEntry.arguments?.getString("questionIndex")?.toIntOrNull() ?: 1
                    QuestionScreen(navController, questionIndex - 1, questionViewModel) // –ü–µ—Ä–µ–¥–∞–µ–º ViewModel
                }
                composable("all_questions_screen") {
                    AllQuestionsScreen(navController = navController, questionViewModel,questionList) // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º viewModel
                }
                composable("favorite_question_screen") {
                    FavoriteQuestionScreen(navController, questionViewModel)
                }
            }
        }
    }
}

@Composable
fun QuestionScreen(navController: NavController, questionIndex: Int, viewModel: QuestionViewModel) {
    val questionList = parseJson(context = LocalContext.current) // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤


    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –í—å—é–ú–æ–¥–µ–ª–∏
    LaunchedEffect(questionIndex) {
        if (viewModel.currentQuestionIndex != questionIndex) {
            viewModel.saveCurrentQuestionState() // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            viewModel.currentQuestionIndex = questionIndex // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
            viewModel.loadQuestionState() // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        }
    }

    var isImageFullScreen by remember { mutableStateOf(false) } // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    // –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    val currentQuestion = questionList.getOrNull(viewModel.currentQuestionIndex)
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (currentQuestion == null) {
        Text(text = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞", fontSize = 24.sp)
        return
    }
    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ ViewModel
    val correctAnswersCount = viewModel.correctAnswersCount

    // ‚úÖ –ï—Å–ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è `correctAnswersCount`
    if (viewModel.isTestFinished) {
        LaunchedEffect(Unit) {
            navController.navigate("result_screen/$correctAnswersCount")
        }
        return
    }
    Box(
        modifier = Modifier.fillMaxSize()
    ) {
        // –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        Image(
            painter = painterResource(id = R.drawable.question_background), // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ—Å—É—Ä—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            contentDescription = null,
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º –±–∏–ª–µ—Ç–∞
            Text(
                text = "${currentQuestion.ticket_number}",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(16.dp))
            // –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            QuestionNavigationPanel(navController, viewModel)
            //QuestionNavigationPanel(navController, viewModel, screenRoute = "exam_screen")

            Spacer(modifier = Modifier.height(22.dp))

            Column(
                modifier = Modifier
                    .fillMaxWidth()

                    .height(230.dp),  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É, —á—Ç–æ–±—ã —É–º–µ—Å—Ç–∏—Ç—å –∏ —Ç–µ–∫—Å—Ç, –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // –í–æ–ø—Ä–æ—Å
                Text(
                    text = currentQuestion.question,
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold
                )

                Spacer(modifier = Modifier.height(16.dp))
                // –í—ã–≤–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if (!currentQuestion.image.isNullOrEmpty() && currentQuestion.image.trim()
                        .isNotEmpty()
                ) {
                    val context = LocalContext.current

                    try {
                        val inputStream = context.assets.open(currentQuestion.image)
                        Log.d("ImageCheck", "–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${currentQuestion.image}")
                    } catch (e: Exception) {
                        Log.e("ImageCheck", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${currentQuestion.image}", e)
                    }

                    val imagePainter = rememberAsyncImagePainter(
                        model = ImageRequest.Builder(context)
                            .data("file:///android_asset/${currentQuestion.image}")
                            .build()
                    )

                    Image(
                        painter = imagePainter,
                        contentDescription = "Image for question",
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(200.dp)
                            .padding(16.dp)
                            .clickable { isImageFullScreen = true }, // –ù–∞–∂–∞—Ç–∏–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è
                        contentScale = ContentScale.Fit
                    )
                } else {
                    Log.d("ImageCheck", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
                }

            }

            // üî• –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –≤ `Column(Modifier.weight(1f))`, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –Ω–µ —Å–¥–≤–∏–≥–∞–ª–∏—Å—å
            Column(
                modifier = Modifier
                    .weight(1f)
                    .verticalScroll(rememberScrollState()), // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // –û—Ç–≤–µ—Ç—ã
                currentQuestion.answers.forEach { answer ->
                    val questionState = viewModel.getCurrentQuestionState()
                    val isSelected = questionState.selectedAnswer == answer.answer_text
                    val isCorrect = questionState.isAnswerCorrect

                    AnswerButton(
                        answerText = answer.answer_text,
                        isCorrect = isCorrect,
                        isSelected = isSelected,
                        onClick = {
                            if (!questionState.isAnswerLocked) {
                                viewModel.saveAnswer(answer.answer_text, answer.is_correct)
                            }
                        },
                        isAnswerCorrect = isCorrect
                    )
                }
            }
            Spacer(modifier = Modifier.height(32.dp))

            // üî• –§–∏–∫—Å–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í–ø–µ—Ä–µ–¥" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
            Row(
                horizontalArrangement = Arrangement.SpaceBetween,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp)
            ) {

                // üî• –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                IconButton(
                    onClick = {
                        if (viewModel.currentQuestionIndex > 0) {
                            viewModel.saveCurrentQuestionState()
                            viewModel.currentQuestionIndex--
                        }
                    },
                    enabled = viewModel.currentQuestionIndex > 0
                ) {
                    Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = "Previous")
                }

                // –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É
                if (viewModel.allQuestionsAnswered()) {
                    IconButton(
                        onClick = {
                            navController.navigate("result_screen/${viewModel.correctAnswersCount}")
                        }
                    ) {
                        Icon(imageVector = Icons.Filled.Check, contentDescription = "Finish")
                    }
                } else {
                    // üî• –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ "–í–ø–µ—Ä—ë–¥"
                    IconButton(
                        onClick = {
                            viewModel.saveCurrentQuestionState()
                            viewModel.moveToNextQuestion()
                            navController.navigate("question_screen/${viewModel.currentQuestionIndex}") {
                                launchSingleTop = true // ‚úÖ –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
                            }
                        }
                    ) {
                        Icon(imageVector = Icons.Filled.ArrowForward, contentDescription = "Next")
                    }
                }


            }


        }


        // –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if (isImageFullScreen) {
            Dialog(onDismissRequest = { isImageFullScreen = false }) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .background(Color.Black) // –ó–∞—Ç–µ–º–Ω—ë–Ω–Ω—ã–π —Ñ–æ–Ω
                        .clickable { isImageFullScreen = false } // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
                ) {
                    val imagePainter = rememberAsyncImagePainter(
                        model = ImageRequest.Builder(LocalContext.current)
                            .data("file:///android_asset/${currentQuestion.image}")
                            .build()
                    )

                    IconButton(
                        onClick = { isImageFullScreen = false },
                        modifier = Modifier
                            .align(Alignment.TopEnd)
                            .padding(16.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Filled.Close,
                            contentDescription = "Close",
                            tint = Color.White
                        )
                    }


                    Image(
                        painter = imagePainter,
                        contentDescription = "Full-screen image",
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(16.dp),
                        contentScale = ContentScale.Fit
                    )
                }
            }
        }
    }
}

