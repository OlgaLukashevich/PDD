package com.example.pdd0

import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.compose.runtime.*
import kotlin.random.Random

class QuestionViewModel : ViewModel() {
    var currentQuestionIndex by mutableStateOf(0)
    var isTestFinished by mutableStateOf(false)
    var questionStates = mutableStateMapOf<Int, QuestionState>()
    var correctAnswersCount by mutableStateOf(0) // ‚úÖ –°—á—ë—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    var currentTicketStartIndex by mutableStateOf(0) // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –±–∏–ª–µ—Ç–∞


   // var showFavoriteMessage by mutableStateOf(false)
    var isTicketFavorite by mutableStateOf(false)

    fun getCurrentQuestionState(): QuestionState {
        return questionStates[currentQuestionIndex] ?: QuestionState(null, false, false)
    }
    fun saveAnswer(answerText: String, isCorrect: Boolean) {
        val currentState = questionStates[currentQuestionIndex] ?: QuestionState(null, false, false)
        questionStates[currentQuestionIndex] = currentState.copy(
            selectedAnswer = answerText,
            isAnswerCorrect = isCorrect,
            isAnswerLocked = true
        )

        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        correctAnswersCount = questionStates.values.count { it.isAnswerCorrect }
        checkTestCompletion() // üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    }

    fun loadQuestionState() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –≤ `questionStates`, –ø–æ—ç—Ç–æ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }

    fun saveCurrentQuestionState() {
        // –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –Ω–µ –∏–∑–º–µ–Ω—è—è –µ–≥–æ
        if (!questionStates.containsKey(currentQuestionIndex)) {
            questionStates[currentQuestionIndex] = QuestionState(null, false, false)
        }
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    fun findFirstUnanswered(): Int? {
        return (0 until 10).firstOrNull { questionStates[it]?.selectedAnswer == null }
    }



    var lastTicketStartIndex by mutableStateOf(0) // ‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–∏–ª–µ—Ç–∞




    // üî• –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞
    fun resetTest() {
        if (currentTicketStartIndex == 0) {
            currentTicketStartIndex = (currentQuestionIndex / 10) * 10 // ‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∏–ª–µ—Ç –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
        }

        questionStates.clear() // ‚úÖ –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        correctAnswersCount = 0 // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        isTestFinished = false // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        currentQuestionIndex = currentTicketStartIndex // ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –±–∏–ª–µ—Ç–∞
    }


    fun loadRandomTicket() {
        questionStates.clear()
        val randomTicket = (0 until 40).random() * 10 // ‚úÖ –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–∏–ª–µ—Ç (0-39) * 10
        currentTicketStartIndex = randomTicket // ‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –±–∏–ª–µ—Ç–∞
        currentQuestionIndex = randomTicket
        isTestFinished = false
    }






    // üî• –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –±–∏–ª–µ—Ç–∞
    fun moveToNextQuestion() {
        val ticketStartIndex = (currentQuestionIndex / 10) * 10 // –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –±–∏–ª–µ—Ç–∞
        if (currentQuestionIndex < ticketStartIndex + 9) { // –û—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ä–∞–º–∫–∞—Ö –±–∏–ª–µ—Ç–∞ (–æ—Ç 0 –¥–æ 9)
            currentQuestionIndex++
        }
    }





    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—É—â–µ–º –±–∏–ª–µ—Ç–µ –æ—Ç–≤–µ—á–µ–Ω—ã
    fun allQuestionsAnswered(): Boolean {
        val ticketStartIndex = (currentQuestionIndex / 10) * 10 // –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –±–∏–ª–µ—Ç–∞
        return (ticketStartIndex until ticketStartIndex + 10).all { questionStates[it]?.selectedAnswer != null }
    }

    // ‚úÖ –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    private fun checkTestCompletion() {
        if (allQuestionsAnswered()) {
            isTestFinished = true
        }
    }


//    fun loadSpecificTicket(ticketIndex: Int) {
//        questionStates.clear() // ‚úÖ –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
//        currentTicketStartIndex = ticketIndex // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —ç—Ç–æ–≥–æ –±–∏–ª–µ—Ç–∞
//        currentQuestionIndex = ticketIndex
//        isTestFinished = false
//    }


    fun loadSpecificTicket(ticketIndex: Int) {
        questionStates.clear()
        correctAnswersCount = 0
        isTestFinished = false

        lastTicketStartIndex = ticketIndex // ‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –±–∏–ª–µ—Ç–∞
        currentQuestionIndex = ticketIndex
    }



    // üìå –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
    var favoriteTickets = mutableStateListOf<Int>()

    // ‚úÖ –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    fun toggleFavoriteTicket(ticketIndex: Int): Boolean {
        return if (favoriteTickets.contains(ticketIndex)) {
            favoriteTickets.remove(ticketIndex)
            isTicketFavorite = false
            false // –ë–∏–ª–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        } else {
            favoriteTickets.add(ticketIndex)
            isTicketFavorite = true
            true // –ë–∏–ª–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        }
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–∏–ª–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–º
    fun isTicketFavorite(ticketIndex: Int): Boolean {
        return favoriteTickets.contains(ticketIndex)
    }

}
