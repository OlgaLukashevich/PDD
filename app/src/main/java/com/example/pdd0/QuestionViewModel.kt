package com.example.pdd0

import android.util.Log
import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.compose.runtime.*
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import com.example.pdd0.dataClass.Question
import com.example.pdd0.dataClass.QuestionState
import com.example.pdd0.dataStore.FavoriteTicketsManager
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import kotlin.random.Random

class QuestionViewModel(private val favoriteTicketsManager: FavoriteTicketsManager) : ViewModel() {
    var currentQuestionIndex by mutableStateOf(0)
    var isTestFinished by mutableStateOf(false)
    var questionStates = mutableStateMapOf<Int, QuestionState>()
    var correctAnswersCount by mutableStateOf(0) //  –°—á—ë—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    var currentTicketStartIndex by mutableStateOf(0) //  –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –±–∏–ª–µ—Ç–∞
    //  –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞
    var examWrongAnswersCount by mutableStateOf(0)
        private set

    var isTicketFavorite by mutableStateOf(false)


    // –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    var incorrectQuestions = mutableStateListOf<Int>()
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    var questionCommentsState = mutableStateMapOf<Int, Boolean>()
    val explanationTexts = mutableStateMapOf<Int, String>() // <--- –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ


     // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    fun resetCommentStates() {
        questionCommentsState.clear() // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      //  isCommentVisible.value = true  // –°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –µ—Å–ª–∏ —Ç–µ—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    fun hideCommentForQuestion(questionIndex: Int) {
        questionCommentsState[questionIndex] = false
      //  isCommentVisible.value = false // –°–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    fun getCommentStateForQuestion(questionIndex: Int): Boolean {
        return questionCommentsState[questionIndex] ?: true // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    }

    // –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    var questionList: List<Question> = emptyList()


    // –¢–∞–π–º–µ—Ä –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    private val _timeLeft = MutableLiveData<Long>()
    val timeLeft: LiveData<Long> get() = _timeLeft

    var isTimeUp by mutableStateOf(false) // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ—á–µ—Ç
    private var isTimerPaused by mutableStateOf(false) // Track the pause state of the timer
    private var timerJob: Job? = null // Coroutine job to manage the timer


    // –ù–∞—á–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞ (3 –º–∏–Ω—É—Ç—ã)
    init {
        _timeLeft.value = 5 * 60 * 1000L

    }

    private fun startTimer() {
        timerJob = viewModelScope.launch {
            while (_timeLeft.value!! > 0 && !isTimerPaused) {
                delay(1000L) // —É–º–µ–Ω—å—à–∞—Ç—å –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                _timeLeft.value = _timeLeft.value!! - 1000L
            }
            if (_timeLeft.value!! <= 0) {
                isTimeUp = true
            }
        }
    }

    // –ü–∞—É–∑–∞ —Ç–∞–π–º–µ—Ä–∞
    fun pauseTimer() {
        isTimerPaused = true
        timerJob?.cancel() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—Ä—É—Ç–∏–Ω
    }

    // –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
    fun resumeTimer() {
        if (isTimerPaused) {
            isTimerPaused = false // –°–Ω–∏–º–∞–µ–º –ø–∞—É–∑—É
            startTimer() // –¢–∞–π–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –æ—Ç—Å—á–µ—Ç —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –±—ã–ª –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

        }
    }

    fun resetTimerToInitial() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç)
        _timeLeft.value = 5 * 60 * 1000L // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

        pauseTimer()
        resetExamCounters()
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    fun resetExamCounters() {
        examWrongAnswersCount = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        isTimeUp = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    }


    fun getCurrentQuestionState(): QuestionState {
        return questionStates[currentQuestionIndex] ?: QuestionState(null, false, false)
    }


    fun saveAnswer(answerText: String, isCorrect: Boolean, explanationText: String) {
        val currentState = questionStates[currentQuestionIndex] ?: QuestionState(null, false, false)
        questionStates[currentQuestionIndex] = currentState.copy(
            selectedAnswer = answerText,
            isAnswerCorrect = isCorrect,
            isAnswerLocked = true
        )

        if (!isCorrect) {
            //  –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º explanationText
            explanationTexts[currentQuestionIndex] = explanationText

            //  –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            questionCommentsState[currentQuestionIndex] = true

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª
            if (!incorrectQuestions.contains(currentQuestionIndex)) {
                incorrectQuestions.add(currentQuestionIndex)
            }
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        correctAnswersCount = questionStates.values.count { it.isAnswerCorrect }
        checkTestCompletion() //  –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞

    }

    fun getExplanationForQuestion(index: Int): String {
        return explanationTexts[index] ?: ""
    }




    fun getCurrentTicketNumber(questionList: List<Question>): String {
        val currentQuestion = questionList.getOrNull(currentQuestionIndex)
        return currentQuestion?.ticket_number ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∏–ª–µ—Ç - $currentQuestionIndex" // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
    }

    fun loadQuestionState() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –≤ `questionStates`, –ø–æ—ç—Ç–æ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }

    fun saveCurrentQuestionState() {
        // –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –Ω–µ –∏–∑–º–µ–Ω—è—è –µ–≥–æ
        if (!questionStates.containsKey(currentQuestionIndex)) {
            questionStates[currentQuestionIndex] = QuestionState(null, false, false)
        }
    }

    // üî• –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞
    fun resetTest() {
        if (currentTicketStartIndex == 0) {
            currentTicketStartIndex = (currentQuestionIndex / 10) * 10 // ‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∏–ª–µ—Ç –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
        }

        questionStates.clear() // ‚úÖ –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        correctAnswersCount = 0 // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        isTestFinished = false // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        currentQuestionIndex = currentTicketStartIndex // ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –±–∏–ª–µ—Ç–∞

        // ‚úÖ –û—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        questionCommentsState.clear()
        explanationTexts.clear()
    }


    fun loadRandomTicket() {
        questionStates.clear()
        questionCommentsState.clear() // ‚úÖ –æ—á–∏—â–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        explanationTexts.clear() // ‚úÖ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

        val randomTicket = (0 until 40).random() * 10 // ‚úÖ –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–∏–ª–µ—Ç (0-39) * 10
        currentTicketStartIndex = randomTicket // ‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –±–∏–ª–µ—Ç–∞
        currentQuestionIndex = randomTicket
        isTestFinished = false
    }

    // üî• –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –±–∏–ª–µ—Ç–∞
    fun moveToNextQuestion() {
        val ticketStartIndex = (currentQuestionIndex / 10) * 10 // –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –±–∏–ª–µ—Ç–∞
        if (currentQuestionIndex < ticketStartIndex + 9) { // –û—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ä–∞–º–∫–∞—Ö –±–∏–ª–µ—Ç–∞ (–æ—Ç 0 –¥–æ 9)
            currentQuestionIndex++
        }
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—É—â–µ–º –±–∏–ª–µ—Ç–µ –æ—Ç–≤–µ—á–µ–Ω—ã
    fun allQuestionsAnswered(): Boolean {
        val ticketStartIndex = (currentQuestionIndex / 10) * 10 // –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –±–∏–ª–µ—Ç–∞
        return (ticketStartIndex until ticketStartIndex + 10).all { questionStates[it]?.selectedAnswer != null }
    }

    // ‚úÖ –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
    private fun checkTestCompletion() {
        if (allQuestionsAnswered()) {
            isTestFinished = true
        }
    }


    // –ò—Å–ø–æ–ª—å–∑—É–µ–º FavoriteTicketsManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –±–∏–ª–µ—Ç–∞–º–∏
    private val _favoriteTickets = MutableStateFlow<Set<String>>(emptySet())
    val favoriteTickets: StateFlow<Set<String>> get() = _favoriteTickets

    init {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ViewModel
        viewModelScope.launch {
            favoriteTicketsManager.favoriteTickets.collect { favorites ->
                _favoriteTickets.value = favorites
            }
        }
    }

    fun toggleFavoriteTicket(ticketNumber: String) {
        viewModelScope.launch {
            val isCurrentlyFavorite = _favoriteTickets.value.contains(ticketNumber)

            if (isCurrentlyFavorite) {
                favoriteTicketsManager.removeFavoriteTicket(ticketNumber)
            } else {
                favoriteTicketsManager.addFavoriteTicket(ticketNumber)
            }

            // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º `favoriteTickets`, —á—Ç–æ–±—ã UI –æ–±–Ω–æ–≤–∏–ª—Å—è
            _favoriteTickets.value = _favoriteTickets.value.toMutableSet().apply {
                if (isCurrentlyFavorite) remove(ticketNumber) else add(ticketNumber)
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è UI
            isTicketFavorite = !isCurrentlyFavorite
        }
    }


    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    fun addFavoriteTicket(ticketNumber: String) {
        _favoriteTickets.value = _favoriteTickets.value + ticketNumber
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    fun removeFavoriteTicket(ticketNumber: String) {
        _favoriteTickets.value = _favoriteTickets.value - ticketNumber  // –£–¥–∞–ª—è–µ–º –∏–∑ Set
    }


    // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫ –≤ —Ä–µ–∂–∏–º–µ —ç–∫–∑–∞–º–µ–Ω–∞
    fun incrementExamWrongAnswers() {
        examWrongAnswersCount++
    }


    private val _ticketResults = MutableStateFlow<Map<String, Int>>(emptyMap())
    val ticketResults: StateFlow<Map<String, Int>> get() = _ticketResults

    init {
        viewModelScope.launch {
            favoriteTicketsManager.ticketResults.collect { results ->
                _ticketResults.value = results
            }
        }
    }

    fun saveTicketResult(ticketNumber: String, correctAnswers: Int) {
        viewModelScope.launch {
            favoriteTicketsManager.saveTicketResult(ticketNumber, correctAnswers)
        }
    }
    fun removeTicketResult(ticketNumber: String) {
        viewModelScope.launch {
            favoriteTicketsManager.removeTicketResult(ticketNumber)
        }
    }



}
