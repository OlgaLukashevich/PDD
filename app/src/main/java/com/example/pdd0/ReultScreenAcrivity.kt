package com.example.pdd0

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.pdd0.parser.parseJson
import androidx.compose.ui.unit.dp



@Composable
fun ResultScreen(correctAnswersCount: Int, totalQuestions: Int, navController: NavController, viewModel: QuestionViewModel) {
    val resultText = "$correctAnswersCount/10"
    val context = LocalContext.current
    val questionList = parseJson(context) // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    val currentTicketNumber = viewModel.getCurrentTicketNumber(questionList) // ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞

    val favoriteTickets by viewModel.favoriteTickets.collectAsState() // ‚úÖ –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –±–∏–ª–µ—Ç–∞–º–∏
    val isFavorite = favoriteTickets.contains(currentTicketNumber) // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–∏ –±–∏–ª–µ—Ç

    val ticketProgress = viewModel.getTicketProgress("1") // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–∏–ª–µ—Ç–∞ 1 (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –±–∏–ª–µ—Ç–∞)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    val resultMessage = when {
        correctAnswersCount == 10 -> "–®–∏–∫–∞—Ä–Ω–æ! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!"
        correctAnswersCount >= 7 -> "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ù–æ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
        else -> "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑."
    }

    Box(
        modifier = Modifier.fillMaxSize()
    ) {
        // –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        Image(
            painter = painterResource(id = R.drawable.result_background), // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ—Å—É—Ä—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            contentDescription = null,
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!",
                fontSize = 28.sp,
                fontWeight = FontWeight.Bold,
                color = Color.White, // –ë–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                style = TextStyle(
                    letterSpacing = 1.5.sp, // –¢–µ–∫—Å—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –º–µ–∂–¥—É –±—É–∫–≤–∞–º–∏
                    textAlign = TextAlign.Center
                )
            )

            Spacer(modifier = Modifier.height(16.dp))

            Text(
                text = "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $resultText",
                fontSize = 36.sp,
                fontWeight = FontWeight.Bold,
                color = if (correctAnswersCount == 10) Color.Green else Color.Red, //== totalQuestions
                style = TextStyle(
                    letterSpacing = 1.sp,
                    textAlign = TextAlign.Center,
                    background = Color(0xFF0D6B5E) // –õ–µ–≥–∫–∏–π –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                )
            )
            Spacer(modifier = Modifier.height(6.dp))
            Text(
                text = resultMessage,
                fontSize = 20.sp,
                fontWeight = FontWeight.Medium,
                color = Color.White,
                style = TextStyle(
                    letterSpacing = 1.5.sp,
                    textAlign = TextAlign.Center,
                    background = Color(0x88000000) // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                )
            )

            Spacer(modifier = Modifier.height(32.dp))

            // üî• –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ"
            Button(
                onClick = {
                    viewModel.resetTest() // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç –ø–µ—Ä–µ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
                    val restartIndex =
                        viewModel.currentTicketStartIndex // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç
                    navController.navigate("question_screen/$restartIndex") {
                        popUpTo("main_screen") { inclusive = false } // ‚úÖ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–∫—Ä–∞–Ω—ã
                    }
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(60.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF6AC06E), // –ó–µ–ª–µ–Ω—ã–π
                    contentColor = Color.White
                ),
                shape = RoundedCornerShape(12.dp) // –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
            ) {
                Text("–ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", fontSize = 18.sp, fontWeight = FontWeight.Bold)
            }

            Spacer(modifier = Modifier.height(16.dp))

            // üî• –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –±–∏–ª–µ—Ç"
            Button(
                onClick = {
                    viewModel.loadRandomTicket()
                    navController.navigate("question_screen/${viewModel.currentQuestionIndex}") {
                        popUpTo("main_screen") // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–∫—Ä–∞–Ω—ã
                    }
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(60.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF9BACB0), // –°–µ—Ä—ã–π
                    contentColor = Color.White
                ),
                shape = RoundedCornerShape(12.dp) // –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
            ) {
                Text("–°–ª–µ–¥—É—é—â–∏–π –±–∏–ª–µ—Ç", fontSize = 18.sp, fontWeight = FontWeight.Bold)
            }

            Spacer(modifier = Modifier.height(16.dp))

            // –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–∞—è"
            Button(
                onClick = {
                    viewModel.resetTest() // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞
                    navController.navigate("main_screen") {
                        popUpTo("main_screen") { inclusive = true } // ‚úÖ –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–∫—Ä–∞–Ω—ã
                    }
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(60.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF7EA6B9), // –ë–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π —Å–µ—Ä—ã–π
                    contentColor = Color.White
                ),
                shape = RoundedCornerShape(12.dp) // –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
            ) {
                Text("–ì–ª–∞–≤–Ω–∞—è", fontSize = 18.sp, fontWeight = FontWeight.Bold)
            }

        }
    }
}
